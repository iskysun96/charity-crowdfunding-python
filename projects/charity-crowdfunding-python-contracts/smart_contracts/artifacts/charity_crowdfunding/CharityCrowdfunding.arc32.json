{
    "hints": {
        "bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_fund()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuY2hhcml0eV9jcm93ZGZ1bmRpbmcuY29udHJhY3QuQ2hhcml0eUNyb3dkZnVuZGluZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NoYXJpdHlfY3Jvd2RmdW5kaW5nL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBjbGFzcyBDaGFyaXR5Q3Jvd2RmdW5kaW5nKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "active": {
                    "type": "uint64",
                    "key": "active"
                },
                "detail": {
                    "type": "bytes",
                    "key": "detail"
                },
                "donator_num": {
                    "type": "uint64",
                    "key": "donator_num"
                },
                "fund_raised": {
                    "type": "uint64",
                    "key": "fund_raised"
                },
                "goal": {
                    "type": "uint64",
                    "key": "goal"
                },
                "min_donation": {
                    "type": "uint64",
                    "key": "min_donation"
                },
                "reward_nft_id": {
                    "type": "uint64",
                    "key": "reward_nft_id"
                },
                "title": {
                    "type": "bytes",
                    "key": "title"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "donator_info": {
                    "type": "uint64",
                    "key": "donator_info"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "CharityCrowdfunding",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "goal"
                    },
                    {
                        "type": "string",
                        "name": "detail"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "uint64",
                        "name": "min_donation"
                    },
                    {
                        "type": "string",
                        "name": "asset_name"
                    },
                    {
                        "type": "string",
                        "name": "unit_name"
                    },
                    {
                        "type": "uint64",
                        "name": "nft_amount"
                    },
                    {
                        "type": "string",
                        "name": "asset_url"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "fund",
                "args": [
                    {
                        "type": "pay",
                        "name": "fund_pay"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claim_fund",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "opt_in": "CALL",
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
}