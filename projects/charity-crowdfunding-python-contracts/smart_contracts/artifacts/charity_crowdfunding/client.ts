/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fund(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_fund()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuY2hhcml0eV9jcm93ZGZ1bmRpbmcuY29udHJhY3QuQ2hhcml0eUNyb3dkZnVuZGluZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL2NoYXJpdHlfY3Jvd2RmdW5kaW5nL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBjbGFzcyBDaGFyaXR5Q3Jvd2RmdW5kaW5nKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1
    }
  },
  "schema": {
    "global": {
      "declared": {
        "active": {
          "type": "uint64",
          "key": "active"
        },
        "detail": {
          "type": "bytes",
          "key": "detail"
        },
        "donator_num": {
          "type": "uint64",
          "key": "donator_num"
        },
        "fund_raised": {
          "type": "uint64",
          "key": "fund_raised"
        },
        "goal": {
          "type": "uint64",
          "key": "goal"
        },
        "min_donation": {
          "type": "uint64",
          "key": "min_donation"
        },
        "reward_nft_id": {
          "type": "uint64",
          "key": "reward_nft_id"
        },
        "title": {
          "type": "bytes",
          "key": "title"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {
        "donator_info": {
          "type": "uint64",
          "key": "donator_info"
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "CharityCrowdfunding",
    "methods": [
      {
        "name": "bootstrap",
        "args": [
          {
            "type": "uint64",
            "name": "goal"
          },
          {
            "type": "string",
            "name": "detail"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "uint64",
            "name": "min_donation"
          },
          {
            "type": "string",
            "name": "asset_name"
          },
          {
            "type": "string",
            "name": "unit_name"
          },
          {
            "type": "uint64",
            "name": "nft_amount"
          },
          {
            "type": "string",
            "name": "asset_url"
          },
          {
            "type": "pay",
            "name": "mbr_pay"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "fund",
        "args": [
          {
            "type": "pay",
            "name": "fund_pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claim_fund",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "opt_in": "CALL",
    "delete_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the CharityCrowdfunding smart contract.
 */
export type CharityCrowdfunding = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64' | 'bootstrap', {
      argsObj: {
        goal: bigint | number
        detail: string
        title: string
        minDonation: bigint | number
        assetName: string
        unitName: string
        nftAmount: bigint | number
        assetUrl: string
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [goal: bigint | number, detail: string, title: string, minDonation: bigint | number, assetName: string, unitName: string, nftAmount: bigint | number, assetUrl: string, mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: bigint
    }>
    & Record<'fund(pay)void' | 'fund', {
      argsObj: {
        fundPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [fundPay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claim_fund()uint64' | 'claim_fund', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      active?: IntegerState
      detail?: BinaryState
      donatorNum?: IntegerState
      fundRaised?: IntegerState
      goal?: IntegerState
      minDonation?: IntegerState
      rewardNftId?: IntegerState
      title?: BinaryState
    }
    local: {
      donatorInfo?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CharityCrowdfundingSig = keyof CharityCrowdfunding['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CharityCrowdfundingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CharityCrowdfunding smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CharityCrowdfundingSig> = CharityCrowdfunding['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CharityCrowdfunding smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CharityCrowdfundingSig> = CharityCrowdfunding['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CharityCrowdfundingCreateCalls = (typeof CharityCrowdfundingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CharityCrowdfundingCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type CharityCrowdfundingDeleteCalls = (typeof CharityCrowdfundingCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type CharityCrowdfundingDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type CharityCrowdfundingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CharityCrowdfundingCreateCalls) => CharityCrowdfundingCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CharityCrowdfundingDeleteCalls) => CharityCrowdfundingDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CharityCrowdfundingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CharityCrowdfunding smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the CharityCrowdfunding smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the CharityCrowdfunding smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.goal, args.detail, args.title, args.minDonation, args.assetName, args.unitName, args.nftAmount, args.assetUrl, args.mbrPay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fund(args: MethodArgs<'fund(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.fundPay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_fund()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimFund(args: MethodArgs<'claim_fund()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_fund()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CharityCrowdfunding smart contract
 */
export class CharityCrowdfundingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CharityCrowdfundingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CharityCrowdfunding['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CharityCrowdfunding smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CharityCrowdfundingDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CharityCrowdfundingCallFactory.create)
    const deleteArgs = params.deleteCall?.(CharityCrowdfundingCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CharityCrowdfunding smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the CharityCrowdfunding smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the CharityCrowdfunding smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.optIn(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CharityCrowdfunding smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the fund(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fund(args: MethodArgs<'fund(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingCallFactory.fund(args, params))
  }

  /**
   * Calls the claim_fund()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimFund(args: MethodArgs<'claim_fund()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityCrowdfundingCallFactory.claimFund(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CharityCrowdfunding['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get active() {
        return CharityCrowdfundingClient.getIntegerState(state, 'active')
      },
      get detail() {
        return CharityCrowdfundingClient.getBinaryState(state, 'detail')
      },
      get donatorNum() {
        return CharityCrowdfundingClient.getIntegerState(state, 'donator_num')
      },
      get fundRaised() {
        return CharityCrowdfundingClient.getIntegerState(state, 'fund_raised')
      },
      get goal() {
        return CharityCrowdfundingClient.getIntegerState(state, 'goal')
      },
      get minDonation() {
        return CharityCrowdfundingClient.getIntegerState(state, 'min_donation')
      },
      get rewardNftId() {
        return CharityCrowdfundingClient.getIntegerState(state, 'reward_nft_id')
      },
      get title() {
        return CharityCrowdfundingClient.getBinaryState(state, 'title')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<CharityCrowdfunding['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get donatorInfo() {
        return CharityCrowdfundingClient.getIntegerState(state, 'donator_info')
      },
    }
  }

  public compose(): CharityCrowdfundingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fund(args: MethodArgs<'fund(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimFund(args: MethodArgs<'claim_fund()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimFund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CharityCrowdfundingComposer
  }
}
export type CharityCrowdfundingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CharityCrowdfundingComposer<[...TReturns, MethodReturn<'bootstrap(uint64,string,string,uint64,string,string,uint64,string,pay)uint64'>]>

  /**
   * Calls the fund(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fund(args: MethodArgs<'fund(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CharityCrowdfundingComposer<[...TReturns, MethodReturn<'fund(pay)void'>]>

  /**
   * Calls the claim_fund()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimFund(args: MethodArgs<'claim_fund()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CharityCrowdfundingComposer<[...TReturns, MethodReturn<'claim_fund()uint64'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CharityCrowdfunding smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CharityCrowdfundingComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CharityCrowdfunding smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CharityCrowdfundingComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CharityCrowdfunding smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CharityCrowdfundingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CharityCrowdfundingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CharityCrowdfundingComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CharityCrowdfundingComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CharityCrowdfundingComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CharityCrowdfundingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
